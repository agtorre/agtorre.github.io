<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Aaron&#39;s Desk Chair Adventures</title>
		<link>https://www.aaron-torres.com/posts/</link>
		<description>Recent content in Posts on Aaron&#39;s Desk Chair Adventures</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<managingEditor>me@aaron-torres.com (Aaron Torres)</managingEditor>
		<webMaster>me@aaron-torres.com (Aaron Torres)</webMaster>
		<lastBuildDate>Tue, 17 May 2016 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://www.aaron-torres.com/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Go API Versioning with Gorilla Mux</title>
			<link>https://www.aaron-torres.com/posts/api-versioning-gorilla-mux/</link>
			<pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate>
			<author>me@aaron-torres.com (Aaron Torres)</author>
			<guid>https://www.aaron-torres.com/posts/api-versioning-gorilla-mux/</guid>
			<description>Code-Based Versioning Recently I had a problem where I needed to implement API versioning in code. The versions would share the vast majority of routes/handlers and I found that I wanted to re-use the base routes and modifying them slightly between versions. I imagined using Gorilla mux router as the base with all the routes and then creating a new router for v1, v2, etc that would &amp;lsquo;inherit&amp;rsquo; the base routes and only modify a few.</description>
			<content type="html"><![CDATA[<h3 id="code-based-versioning">Code-Based Versioning</h3>
<p>Recently I had a problem where I needed to implement API versioning in code. The versions would share the vast majority of routes/handlers and I found that I wanted to re-use the base routes and modifying them slightly between versions. I imagined using <a href="http://www.gorillatoolkit.org/pkg/mux">Gorilla mux router</a> as the base with all the routes and then creating a new router for v1, v2, etc that would &lsquo;inherit&rsquo; the base routes and only modify a few. That would maximize code-reuse as I&rsquo;d only have to modify the latest route in one place for many versions to receive the benefit.</p>
<p>I searched around Google, Stack Overflow, and the Gorilla mux documentation about attaching a subrouter to a route and similar terms, but I struggled to find a working solution. I found a few useful posts and here&rsquo;s the result:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
        <span class="s">&#34;fmt&#34;</span>
        <span class="s">&#34;net/http&#34;</span>

        <span class="s">&#34;github.com/gorilla/mux&#34;</span>
<span class="p">)</span>

<span class="c1">// AnotherHandlerLatest is the newest version of AnotherHandler
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">AnotherHandlerLatest</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;hello from AnotherHandlerLatest.&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// ExampleHandlerLatest is the newest version of ExampleHandler
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">ExampleHandlerLatest</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;hello from ExampleHandlerLatest.&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// ExampleHandlerV1 is a v1-compatible version of ExampleHandler
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">ExampleHandlerV1</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;Hello from ExampleHandlerv1.&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// AddV1Routes takes a router or subrouter and adds all the v1
</span><span class="c1">// routes to it
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">AddV1Routes</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">mux</span><span class="p">.</span><span class="nx">Router</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">r</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/example&#34;</span><span class="p">,</span> <span class="nx">ExampleHandlerV1</span><span class="p">)</span>
        <span class="nf">AddRoutes</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// AddV2Routes takes a router or subrouter and adds all the v2
</span><span class="c1">// routes to it, note that these should probably match
</span><span class="c1">// AddRoutes(r *muxRouter) alternatively you can do
</span><span class="c1">// var AddV2Routes = AddRoutes
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">AddV2Routes</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">mux</span><span class="p">.</span><span class="nx">Router</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">AddRoutes</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// AddRoutes takes a router or subrouter and adds all the latest
</span><span class="c1">// routes to it
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">AddRoutes</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">mux</span><span class="p">.</span><span class="nx">Router</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">r</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/example&#34;</span><span class="p">,</span> <span class="nx">ExampleHandlerLatest</span><span class="p">)</span>
        <span class="nx">r</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/example2&#34;</span><span class="p">,</span> <span class="nx">AnotherHandlerLatest</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">router</span> <span class="o">:=</span> <span class="nx">mux</span><span class="p">.</span><span class="nf">NewRouter</span><span class="p">()</span>

        <span class="c1">// latest
</span><span class="c1"></span>        <span class="nf">AddRoutes</span><span class="p">(</span><span class="nx">router</span><span class="p">)</span>

        <span class="c1">// v1
</span><span class="c1"></span>        <span class="nf">AddV1Routes</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nf">PathPrefix</span><span class="p">(</span><span class="s">&#34;/v1&#34;</span><span class="p">).</span><span class="nf">Subrouter</span><span class="p">())</span>

        <span class="c1">// v2
</span><span class="c1"></span>        <span class="nf">AddV2Routes</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nf">PathPrefix</span><span class="p">(</span><span class="s">&#34;/v2&#34;</span><span class="p">).</span><span class="nf">Subrouter</span><span class="p">())</span>
<span class="p">}</span>
</code></pre></div><p>The end result of this is that /example and /v2/example point at the same handler, but /v1/example points at a different handler. When a new version is created, I rename HandlerLatest to HandlerVn where n is the previous newest version. I add it to the AddVnRoutes, create an AddVn+1Routes and new version is made! I can easily deprecate older versions (and their associated handlers) as needed.</p>
]]></content>
		</item>
		
		<item>
			<title>Go Validation Tricks</title>
			<link>https://www.aaron-torres.com/posts/validation-tricks/</link>
			<pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
			<author>me@aaron-torres.com (Aaron Torres)</author>
			<guid>https://www.aaron-torres.com/posts/validation-tricks/</guid>
			<description>As I&amp;rsquo;ve gotten more familiar with Go web programming, I&amp;rsquo;ve tried to solve the problem of form and payload validation a number of different ways. Coming from a Python background, I initially really liked the idea of using a validation method.
type Form struct{ Field1 string `json:&amp;#34;field1&amp;#34;` Field2 int `json:&amp;#34;field2&amp;#34;` } // we can pass in multiple arguments like db, or whatever else. // do any validation necessary using the values in Form func (f *Form) Validate(db *Database) error{ } There are a few problems with this approach.</description>
			<content type="html"><![CDATA[<p>As I&rsquo;ve gotten more familiar with Go web programming, I&rsquo;ve tried to solve the problem of form and payload validation a number of different ways. Coming from a Python background, I initially really liked the idea of using a validation method.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Form</span> <span class="kd">struct</span><span class="p">{</span>
    <span class="nx">Field1</span> <span class="kt">string</span> <span class="s">`json:&#34;field1&#34;`</span>
    <span class="nx">Field2</span> <span class="kt">int</span>    <span class="s">`json:&#34;field2&#34;`</span>
<span class="p">}</span>

<span class="c1">// we can pass in multiple arguments like db, or whatever else.
</span><span class="c1">// do any validation necessary using the values in Form
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">Form</span><span class="p">)</span> <span class="nf">Validate</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">Database</span><span class="p">)</span> <span class="kt">error</span><span class="p">{</span>
<span class="p">}</span>
</code></pre></div><p>There are a few problems with this approach. The first problem is that this validate method is likely to return an error immediately rather than aggregate them all. The second problem is that this validation method is incredibly painful to mock when testing.</p>
<h3 id="first-problem">First Problem</h3>
<p>Let&rsquo;s take a stab at the first problem. In Go, errors are actually an <a href="http://blog.golang.org/error-handling-and-go">interface</a>. One way to implement an error interface and return all errors at the same time might be this Verror approach that <a href="http://husobee.github.io">husobee</a> and I came up with:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;strings&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">NewVerror</span><span class="p">()</span> <span class="o">*</span><span class="nx">Verrors</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="nx">Verrors</span><span class="p">{</span>
        <span class="nx">Errors</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">string</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// keys represent the field
</span><span class="c1">// and each field can have numerous errors
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Verrors</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Errors</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">string</span>
<span class="p">}</span>

<span class="c1">// also works with duplicate errors!
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">Verrors</span><span class="p">)</span> <span class="nf">AddError</span><span class="p">(</span><span class="nx">field</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Errors</span><span class="p">[</span><span class="nx">field</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">Errors</span><span class="p">[</span><span class="nx">field</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ele</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Errors</span><span class="p">[</span><span class="nx">field</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">ele</span> <span class="o">==</span> <span class="nx">err</span> <span class="p">{</span>
            <span class="k">return</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">e</span><span class="p">.</span><span class="nx">Errors</span><span class="p">[</span><span class="nx">field</span><span class="p">]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">Errors</span><span class="p">[</span><span class="nx">field</span><span class="p">],</span> <span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// we can aggregate together functions that return verrors
</span><span class="c1">// or multiple verrors from go routines, for example
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">Verrors</span><span class="p">)</span> <span class="nf">Merge</span><span class="p">(</span><span class="nx">e2</span> <span class="o">*</span><span class="nx">Verrors</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">values</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">e2</span><span class="p">.</span><span class="nx">Errors</span> <span class="p">{</span>
        <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">values</span> <span class="p">{</span>
            <span class="nx">e</span><span class="p">.</span><span class="nf">AddError</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// if you want to return nil instead of an empty verror
</span><span class="c1">// check if Valid return false first
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">Verrors</span><span class="p">)</span> <span class="nf">Valid</span><span class="p">()</span> <span class="kt">bool</span><span class="p">{</span>
    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">Errors</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
<span class="p">}</span>

<span class="c1">// satisfies the error interface
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">Verrors</span><span class="p">)</span> <span class="nf">Error</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="nx">response</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
    <span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Errors</span> <span class="p">{</span>
        <span class="nx">response</span> <span class="o">+=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s: [%s]&#34;</span><span class="p">,</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="s">&#34;,&#34;</span><span class="p">))</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">response</span>
<span class="p">}</span>
</code></pre></div><p>Verrors are pretty flexible, you can even return them as JSON with some additional type checking. Keep in mind this doesn&rsquo;t work too well if you&rsquo;re returning XML.</p>
<h3 id="second-problem">Second Problem</h3>
<p>Mocking in tests is a very large topic, and could be a blog post all on its own. In Go, the only way to mock a method is with an interface. There&rsquo;s a more comprehensive example <a href="http://play.golang.org/p/cWLT0aSkF2">here</a>, but the gist of it is:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Form</span> <span class="kd">struct</span><span class="p">{</span>
    <span class="nx">Field1</span> <span class="kt">string</span> <span class="s">`json:&#34;field1&#34;`</span>
    <span class="nx">Field2</span> <span class="kt">int</span>    <span class="s">`json:&#34;field2&#34;`</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">Form</span><span class="p">)</span> <span class="nf">Validate</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">Database</span><span class="p">)</span> <span class="kt">error</span><span class="p">{</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">FormValidater</span> <span class="kd">interface</span><span class="p">{</span>
     <span class="nf">Validate</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">Database</span><span class="p">)</span> <span class="kt">error</span>
<span class="p">}</span>

<span class="c1">// we can pass in a mock here
</span><span class="c1">// rarely this simple unfortunately
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">ShowMock</span><span class="p">(</span><span class="nx">f</span> <span class="nx">FormValidater</span><span class="p">){</span>
    <span class="nx">db</span> <span class="o">:=</span> <span class="nf">getDatabase</span><span class="p">()</span>
    <span class="nx">f</span><span class="p">.</span><span class="nf">Validate</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>If you&rsquo;re unable to wrap your methods in an interface, for example when the method and its struct are both in the same scope, mocking these methods is pretty much impossible.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Handler</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">){</span>
    <span class="nx">db</span> <span class="o">:=</span> <span class="nf">getDatabase</span><span class="p">()</span>
    <span class="nx">c</span> <span class="o">:=</span> <span class="nf">getFromJSON</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
    <span class="nx">c</span><span class="p">.</span><span class="nf">Validate</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>Another option is using a function that takes the form object as the first argument instead of a method. With functions you can use: <a href="http://play.golang.org/p/oLF1XnRX3C">patch/restore</a>.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Form</span> <span class="kd">struct</span><span class="p">{</span>
    <span class="nx">Field1</span> <span class="kt">string</span> <span class="s">`json:&#34;field1&#34;`</span>
    <span class="nx">Field2</span> <span class="kt">int</span>    <span class="s">`json:&#34;field2&#34;`</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">ValidateForm</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">Form</span><span class="p">,</span> <span class="nx">db</span> <span class="o">*</span><span class="nx">Database</span><span class="p">)</span> <span class="kt">error</span><span class="p">{</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">ShowMock</span><span class="p">(){</span>
    <span class="k">defer</span> <span class="nf">Patch</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ValidateForm</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">Form</span><span class="p">,</span> <span class="nx">db</span> <span class="o">*</span><span class="nx">Database</span><span class="p">)</span> <span class="kt">error</span><span class="p">{</span>
        <span class="k">return</span> <span class="kc">nil</span>
    <span class="p">}).</span><span class="nf">Restore</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div><p>This has the unfortunate side-effect of modifying the global ValidateForm definition and is not thread-safe. For tests this is typically not an issue, but if you want to avoid patch/restore, another strategy is to make use of struct closure variables:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Form</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Field1</span> <span class="kt">string</span> <span class="s">`json:&#34;field1&#34;`</span>
    <span class="nx">Field2</span> <span class="kt">int</span>    <span class="s">`json:&#34;field2&#34;`</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">ValidateForm</span><span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">Form</span><span class="p">,</span> <span class="nx">db</span> <span class="o">*</span><span class="nx">Database</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewFormProcessor</span><span class="p">()</span> <span class="o">*</span><span class="nx">FormProcessor</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="nx">FormProcessor</span><span class="p">{</span>
        <span class="nx">ValidateForm</span><span class="p">:</span> <span class="nx">ValidateForm</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ValidateForm is a closure
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">FormProcessor</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">ValidateForm</span> <span class="kd">func</span><span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">Form</span><span class="p">,</span> <span class="nx">db</span> <span class="o">*</span><span class="nx">Database</span><span class="p">)</span> <span class="kt">error</span>
<span class="p">}</span>

<span class="c1">// an example of mocking ValidateForm that is
</span><span class="c1">// thread-safe
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="nx">FormProcessor</span><span class="p">)</span> <span class="nf">ShowMock</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">f</span><span class="p">.</span><span class="nx">ValidateForm</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">Form</span><span class="p">,</span> <span class="nx">db</span> <span class="o">*</span><span class="nx">Database</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">nil</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>The controllers discussed <a href="/post/handlers-and-state/">here</a> can make great use of an embedded FormProcessor (which can hold any number of validation functions). An example can be found <a href="http://play.golang.org/p/dkGVfVG86u">here</a>.</p>
<h3 id="conclusion">Conclusion</h3>
<p>I&rsquo;ve touched on a few strategies for tackling the validation problem, and I also highly encourage you to check out this <a href="https://github.com/asaskevich/govalidator">validation library</a> to supplement this information. I&rsquo;ll probably discuss this more in the future as I inevitably revisit this myself again.</p>
]]></content>
		</item>
		
		<item>
			<title>Go Handlers and State</title>
			<link>https://www.aaron-torres.com/posts/handlers-and-state/</link>
			<pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate>
			<author>me@aaron-torres.com (Aaron Torres)</author>
			<guid>https://www.aaron-torres.com/posts/handlers-and-state/</guid>
			<description>Today I&amp;rsquo;d like to get a bit technical about things I&amp;rsquo;ve been learning and working on in the Go language
Sometimes it&amp;rsquo;s helpful to pass additional state into a web handler function. For all the examples below, lets assume you want to have a toggle for authentication that is checked once within the handler function. These functions have a specific signature and make it difficult to both add parameters and remain compatible with other libraries.</description>
			<content type="html"><![CDATA[<p>Today I&rsquo;d like to get a bit technical about things I&rsquo;ve been learning and working on in the Go language</p>
<p>Sometimes it&rsquo;s helpful to pass additional state into a <a href="http://golang.org/pkg/net/http/#HandlerFunc">web handler function</a>. For all the examples below, lets assume you want to have a toggle for authentication that is checked once within the handler function. These functions have a specific signature and make it difficult to both add parameters and remain compatible with other libraries. There are many ways to accomplish this, including middleware with some combination of <a href="https://github.com/codegangsta/negroni">middleware</a> and <a href="http://www.gorillatoolkit.org/pkg/context">context</a> libraries. This has the advantage of allowing each request to modify the stored context value without interfering with other handlers. It&rsquo;s a bit complicated if you happen to forget to turn on the middleware and requires a diligent programmer to not hit panics inside the handler by implementing functions like DoAuth below.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">key</span> <span class="kt">int</span>

<span class="kd">const</span> <span class="nx">AuthKey</span> <span class="nx">key</span> <span class="p">=</span> <span class="mi">0</span>

<span class="kd">func</span> <span class="nf">UseAuth</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">next</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">){</span>
    <span class="nx">context</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">AuthKey</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
    <span class="nf">next</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
    <span class="nx">context</span><span class="p">.</span><span class="nf">Clear</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">DoAuth</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">){</span>
    <span class="c1">// in case middle-ware isn&#39;t turned on...
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">doAuth</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">AuthKey</span><span class="p">);</span> <span class="nx">ok</span><span class="p">{</span>
        <span class="k">return</span> <span class="nx">doAuth</span><span class="p">,</span> <span class="kc">nil</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;middleware off&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">AllTheInfo</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">){</span>
    <span class="k">if</span> <span class="nx">doAuth</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">DoAuth</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">doAuth</span><span class="p">{</span>
        <span class="c1">// do something here
</span><span class="c1"></span>    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="nx">n</span> <span class="o">:=</span> <span class="nx">negroni</span><span class="p">.</span><span class="nf">New</span><span class="p">()</span>
    <span class="nx">n</span><span class="p">.</span><span class="nf">Use</span><span class="p">(</span><span class="nx">UseAuth</span><span class="p">)</span>

    <span class="nx">mux</span> <span class="p">=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewServeMux</span><span class="p">()</span>
    <span class="nx">mux</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">AllTheInfo</span><span class="p">)</span>

    <span class="nx">n</span><span class="p">.</span><span class="nf">UseHandler</span><span class="p">(</span><span class="nx">mux</span><span class="p">)</span>
    <span class="nx">n</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="s">&#34;:8000&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>A simpler, but potentially less flexible approach is to use controllers. It&rsquo;s important to remember and keep in mind that controller variables should not be modified inside the handler as it will modify the controller for all other handlers that make use of it. For example, it may seem tempting to set some state based on the current request, but this is not recommended out of the box. Some examples of packages that get around this limitation by creating a controller each request include <a href="https://github.com/gocraft/web">gocraft/web</a> and this <a href="https://github.com/codegangsta/controller">controller</a> library.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Controller</span> <span class="kd">struct</span><span class="p">{</span>
    <span class="nx">DoAuth</span> <span class="kt">bool</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">AllTheInfo</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">){</span>
    <span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">DoAuth</span><span class="p">{</span>
        <span class="c1">// do something here
</span><span class="c1"></span>    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="nx">c</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Controller</span><span class="p">{</span><span class="nx">DoAuth</span><span class="p">:</span> <span class="kc">true</span><span class="p">}</span>
    <span class="nx">http</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">AllTheInfo</span><span class="p">)</span>
    <span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8000&#34;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>Finally, a very light-weight approach I like to make use of is closures. Closures allow the state to be modified from within the handler and are also granular enough that you can tweak them for every route without initializing additional controllers or wrapping every route with middleware incurring context look-up and reflection overhead.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">CheckAllTheInfo</span><span class="p">(</span><span class="nx">DoAuth</span> <span class="kt">bool</span><span class="p">)</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">Request</span><span class="p">){</span>
    <span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">Request</span><span class="p">){</span>
        <span class="k">if</span> <span class="nx">DoAuth</span><span class="p">{</span>
            <span class="c1">// do something here
</span><span class="c1"></span>        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="nx">http</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nf">CheckAllTheInfo</span><span class="p">(</span><span class="kc">true</span><span class="p">))</span>
    <span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8000&#34;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>Overall, there&rsquo;s a lot of ways to accomplish injecting state for web handler functions in Go. There are a number of other middleware packages besides negroni and there are even context objects build into the <a href="https://godoc.org/golang.org/x/net/context">standard library</a> now. I use combinations of all of these as one doesn&rsquo;t scratch all the itches I have. You can also combine these, for example you could attach a context object to a controller that is safe to modify or wrap a controller method in a closure.</p>
]]></content>
		</item>
		
		<item>
			<title>Looking and Moving Forward</title>
			<link>https://www.aaron-torres.com/posts/moving-forward/</link>
			<pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate>
			<author>me@aaron-torres.com (Aaron Torres)</author>
			<guid>https://www.aaron-torres.com/posts/moving-forward/</guid>
			<description>I wanted to start this year off with a new blog built on top of Github Pages and Jekyll, and a look back on what went well (and didn&amp;rsquo;t) in 2013.
The Job The single biggest event of this year was completely uprooting our lives, packing up, and leaving the state. We did this with a car full of a few clothes, a box of important documents, a laptop, 1 cat, 1 dog, 1 baby, and 2 adult humans.</description>
			<content type="html"><![CDATA[<p>I wanted to start this year off with a new blog built on top of Github Pages
and Jekyll, and a look back on what went well (and didn&rsquo;t) in 2013.</p>
<h3 id="the-job">The Job</h3>
<p>The single biggest event of this year was completely uprooting our lives, packing up, and leaving the state. We did this with a car full of a few clothes, a box of important documents, a laptop, 1 cat, 1 dog, 1 baby, and 2 adult humans. We had basically lived in New Mexico our entire lives and we left behind two houses and everyone we knew in order to pursue new opportunities in Seattle. This decision was made with less than a month of notice, but not without enormous scrutiny and worry.</p>
<h3 id="fears">Fears</h3>
<p>The best way I can describe this entire ordeal is terrifying. Imagine completely leaving any comfort zone that you&rsquo;ve created in order to pursue something nearly completely unknown. The next way I&rsquo;d describe it is liberating. There&rsquo;s something incredible about being able to pickup and move anywhere. However these were the gambles:</p>
<ul>
<li>Leaving a job I was very good at and all the security that came with it</li>
<li>Downsizing from a large house that we owned into an apartment</li>
<li>Selling that house in a reasonable amount of time</li>
<li>Getting rid of a lot of our stuff as quickly as possible</li>
<li>Finding an apartment near my new job blindly that also accepts pets and has enough room for us</li>
<li>Financing this whole ordeal</li>
</ul>
<h3 id="howd-that-work-out">How&rsquo;d that work out?</h3>
<p>The good news is, we had to get lucky 2-3 times in order to pull it off , and we nailed all of em. We got an offer on the house the same day we listed it, and sold it shortly after. We also had a successful yard sale where we sold most of what we owned. We made the drive across the country in 3 days, and we&rsquo;ve settled in here so far! Our finances have stabilized, and we&rsquo;re already seeing the benefits of living in the Pacific Northwest.</p>
<p>I really wanted to write a post about this during that frantic period, but that would have made it even worse at the time. There&rsquo;s so much more detail about each of these individual events, but that&rsquo;s best left for another time. If you&rsquo;re ever interested, come have a beer or coffee with me and we can chat about it.</p>
<h3 id="2014">2014</h3>
<p>Without further ado, lets talk about what my plans are for this year. The theme shared by these is that I&rsquo;d like to try and build a personal brand. Now that I&rsquo;m less rooted, it&rsquo;s important that I publicize and adapt wherever possible. Having said that here&rsquo;s the plan:</p>
<ol>
<li>I want to publish multiple open source projects.</li>
<li>I want to actively work on 1 bigger and already established open source
project</li>
<li>I want to register aaron-torres.com, use it to build a personal portfolio
complete with blog, code, resume, etc.</li>
<li>I want to write 2 blog posts a week</li>
<li>I want to publish 3 Android applications (which includes learning Android)</li>
<li>I want to work on a web application for my own personal business</li>
</ol>
<p>This is a LOT to do in a short amount of time, however, I&rsquo;m already off to a running start.</p>
<h3 id="whats-been-done">What&rsquo;s been done.</h3>
<p>I&rsquo;ve hit the ground running, lets get to it:</p>
<ol>
<li>Registered aaron-torres.com (hopefully you&rsquo;re reading it right now). Started
redoing my resume and will have everything up soon</li>
<li>Published gocolorize, an ANSI color library
<a href="https://github.com/agtorre/gocolorize">https://github.com/agtorre/gocolorize</a></li>
<li>Started contributing to the Revel Go framework
(<a href="http://robfig.github.io/revel/">http://robfig.github.io/revel/</a>)</li>
</ol>
<h3 id="if-youd-like-to-read-more">If You&rsquo;d Like to Read More.</h3>
<p>Drop me a line! Star my projects on Github. I hope that I can slowly make myself into a content provider where the things I share are interesting and helpful. I appreciate you take the time to read this far, and I hope that I hold your interest.</p>
]]></content>
		</item>
		
	</channel>
</rss>
