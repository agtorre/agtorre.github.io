<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aaron&#39;s Desk Chair Adventures</title>
    <link>https://www.aaron-torres.com/</link>
    <description>Recent content on Aaron&#39;s Desk Chair Adventures</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>me@aaron-torres.com (Aaron Torres)</managingEditor>
    <webMaster>me@aaron-torres.com (Aaron Torres)</webMaster>
    <lastBuildDate>Tue, 17 May 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.aaron-torres.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go API Versioning with Gorilla Mux</title>
      <link>https://www.aaron-torres.com/posts/api-versioning-gorilla-mux/</link>
      <pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate>
      <author>me@aaron-torres.com (Aaron Torres)</author>
      <guid>https://www.aaron-torres.com/posts/api-versioning-gorilla-mux/</guid>
      <description>Code-Based Versioning Recently I had a problem where I needed to implement API versioning in code. The versions would share the vast majority of routes/handlers and I found that I wanted to re-use the base routes and modifying them slightly between versions. I imagined using Gorilla mux router as the base with all the routes and then creating a new router for v1, v2, etc that would &amp;lsquo;inherit&amp;rsquo; the base routes and only modify a few.</description>
    </item>
    
    <item>
      <title>Go Validation Tricks</title>
      <link>https://www.aaron-torres.com/posts/validation-tricks/</link>
      <pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
      <author>me@aaron-torres.com (Aaron Torres)</author>
      <guid>https://www.aaron-torres.com/posts/validation-tricks/</guid>
      <description>As I&amp;rsquo;ve gotten more familiar with Go web programming, I&amp;rsquo;ve tried to solve the problem of form and payload validation a number of different ways. Coming from a Python background, I initially really liked the idea of using a validation method.
type Form struct{ Field1 string `json:&amp;#34;field1&amp;#34;` Field2 int `json:&amp;#34;field2&amp;#34;` } // we can pass in multiple arguments like db, or whatever else. // do any validation necessary using the values in Form func (f *Form) Validate(db *Database) error{ } There are a few problems with this approach.</description>
    </item>
    
    <item>
      <title>Go Handlers and State</title>
      <link>https://www.aaron-torres.com/posts/handlers-and-state/</link>
      <pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate>
      <author>me@aaron-torres.com (Aaron Torres)</author>
      <guid>https://www.aaron-torres.com/posts/handlers-and-state/</guid>
      <description>Today I&amp;rsquo;d like to get a bit technical about things I&amp;rsquo;ve been learning and working on in the Go language
Sometimes it&amp;rsquo;s helpful to pass additional state into a web handler function. For all the examples below, lets assume you want to have a toggle for authentication that is checked once within the handler function. These functions have a specific signature and make it difficult to both add parameters and remain compatible with other libraries.</description>
    </item>
    
    <item>
      <title>Looking and Moving Forward</title>
      <link>https://www.aaron-torres.com/posts/moving-forward/</link>
      <pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate>
      <author>me@aaron-torres.com (Aaron Torres)</author>
      <guid>https://www.aaron-torres.com/posts/moving-forward/</guid>
      <description>I wanted to start this year off with a new blog built on top of Github Pages and Jekyll, and a look back on what went well (and didn&amp;rsquo;t) in 2013.
The Job The single biggest event of this year was completely uprooting our lives, packing up, and leaving the state. We did this with a car full of a few clothes, a box of important documents, a laptop, 1 cat, 1 dog, 1 baby, and 2 adult humans.</description>
    </item>
    
  </channel>
</rss>